{"version":3,"sources":["actions/fetchList.js","actions/search.js","reducers/fetchList.js","actions/selectUser.js","reducers/selectUser.js","reducers/searchItem.js","components/App/index.js","reducers/index.js","api/api.js","sagas/fetchList.js","sagas/index.js","store.js","index.js"],"names":["createActions","fetchListRequest","fetchListSuccess","fetchListFailure","updateList","searchItem","fetchList","handleActions","_handleActions","Object","defineProperty","state","action","objectSpread","isFetching","isFetched","error","list","payload","getList","getFetchList","selectUser","selectedUser","getSelectedUser","searchItems","getSearchItem","App","_Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","value","target","disabled","handlePreventDefault","preventDefault","handleSubmit","searchList","map","el","key","temp","String","includes","push","handleClick","event","currentPage","Number","id","handleSort","type","sortList","length","isSorted","sorted","direction","slice","sort","a","b","isClicked","handleRequestList","buttonId","getTitles","listArr","keysArr","nestedKey","handleClickRow","rowId","currentTarget","selected","filter","renderTableList","i","react_default","createElement","className","onClick","firstName","lastName","email","phone","address","streetAddress","city","zip","description","renderUserSection","itemsPerPage","isRowClicked","inherits","createClass","_this2","_this$props","_this$state","keys","indexOfLastItem","indexOfFirstItem","currentItems","pageNumbers","Math","ceil","renderPageNumbers","number","onSubmit","placeholder","onChange","index_umd_default","cx","Component","mapDispatchToProps","connect","combineReducers","url","fetch","concat","method","mode","then","response","json","fetchListSaga","fetchListWatch","regenerator_default","wrap","_context","prev","next","sent","put","t0","stop","_marked","_context2","takeLatest","_marked2","_callee","fork","sagas_marked","sagaMiddleware","createSagaMiddleware","store","initialState","createStore","rootReducer","compose","applyMiddleware","window","devToolsExtension","__REDUX_DEVTOOLS_EXTENSION__","f","run","rootSaga","ReactDOM","render","BrowserRouter","es","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.c16e387a.chunk.js","sourcesContent":["import { createActions } from \"redux-actions\";\r\n\r\nexport const {\r\n    fetchListRequest,\r\n    fetchListSuccess,\r\n    fetchListFailure,\r\n    updateList\r\n} = createActions(\r\n    \"FETCH_LIST_REQUEST\",\r\n    \"FETCH_LIST_SUCCESS\",\r\n    \"FETCH_LIST_FAILURE\",\r\n    \"UPDATE_LIST\"\r\n);","import { createActions } from \"redux-actions\";\r\n\r\nexport const {\r\n    searchItem\r\n\r\n\r\n} = createActions(\r\n    \"SEARCH_ITEM\"\r\n);","import {\r\n    fetchListRequest,\r\n    fetchListSuccess,\r\n    fetchListFailure,\r\n    updateList\r\n} from '../actions/fetchList'\r\nimport {searchItem} from \"../actions/search\";\r\n\r\nimport { handleActions } from \"redux-actions\";\r\n\r\nconst initState = {\r\n    isFetching: false,\r\n    isFetched: false,\r\n    list: {},\r\n    error: null\r\n\r\n};\r\n\r\nconst fetchList = handleActions(\r\n    {\r\n        [fetchListRequest]: (state, action) => ({\r\n            ...state,\r\n            isFetching: true,\r\n            isFetched: false,\r\n            error: false\r\n        }),\r\n        [fetchListSuccess]: (state, action) => ({\r\n            ...state,\r\n            isFetching: false,\r\n            isFetched: true,\r\n            list: action.payload,\r\n            error: false\r\n        }),\r\n        [fetchListFailure]: (state, action) => ({\r\n            ...state,\r\n            isFetching: false,\r\n            isFetched: true,\r\n            error: action.error\r\n        }),\r\n        [updateList]:(state,action)=>({\r\n            isFetching: false,\r\n            isFetched: true,\r\n            list:action.payload,\r\n            error: false\r\n        })\r\n    },\r\n    initState\r\n);\r\n\r\nexport const getList = state => state.fetchList.list\r\nexport const getFetchList = state => state.fetchList\r\n\r\n\r\nexport default fetchList;","import {createActions} from 'redux-actions'\r\n\r\nexport const {selectUser} =\r\n    createActions(\r\n    \"SELECT_USER\"\r\n)","import {\r\n    selectUser\r\n} from \"../actions/selectUser\";\r\nimport {handleActions} from 'redux-actions'\r\n\r\nconst initState ={\r\n    selectedUser: null\r\n}\r\n\r\nconst selectedUser = handleActions({\r\n    [selectUser]:(state,action)=>({\r\n        selectedUser:action.payload\r\n    })\r\n\r\n},initState)\r\n\r\nexport const getSelectedUser = state => state.selectedUser.selectedUser\r\n\r\n\r\nexport default selectedUser","import {\r\n   searchItem\r\n} from \"../actions/search\";\r\nimport {handleActions} from 'redux-actions'\r\n\r\nconst initState ={\r\n    searchItem: null\r\n}\r\n\r\nconst searchItems = handleActions({\r\n    [searchItem]:(state,action)=>({\r\n        ...state,\r\n        searchItem:action.payload\r\n    })\r\n\r\n},initState)\r\n\r\nexport const getSearchItem = state => state.searchItems.searchItem\r\n\r\n\r\nexport default searchItems","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {\r\n    getList,\r\n    getFetchList\r\n} from '../../reducers/fetchList'\r\nimport {\r\n    fetchListRequest,\r\n    fetchListSuccess,\r\n    updateList\r\n} from '../../actions/fetchList'\r\nimport {selectUser} from '../../actions/selectUser'\r\nimport {searchItem} from '../../actions/search'\r\nimport cx from 'classnames'\r\nimport Spinner from \"react-svg-spinner\";\r\nimport {getSelectedUser} from \"../../reducers/selectUser\";\r\nimport {getSearchItem} from \"../../reducers/searchItem\";\r\n\r\nimport './index.scss'\r\n\r\n\r\nexport class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentPage: 1,\r\n            itemsPerPage: 3,\r\n            value: '',\r\n            isClicked: false,\r\n            isRowClicked: false,\r\n            disabled: \"disabled\"\r\n        }\r\n\r\n        this.sorted = {\r\n            id: true,\r\n            firstName: true,\r\n            lastName: true,\r\n            email: true,\r\n            phone: true\r\n        };\r\n    }\r\n\r\n\r\n    handleChange = e => {\r\n\r\n        this.setState({\r\n            value: e.target.value,\r\n        })\r\n        this.setState((state) => ({\r\n            disabled: state.value ? \"\" : \"disabled\"\r\n        }))\r\n    }\r\n\r\n    handlePreventDefault = (e) => {\r\n        e.preventDefault()\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const {list} = this.props\r\n        const searchList = []\r\n        list.map((el) => {\r\n            for (var key in el) {\r\n                let temp = el[key]\r\n                if (String(temp).includes(this.state.value)) {\r\n                    searchList.push(el)\r\n                }\r\n            }\r\n        })\r\n        this.setState({\r\n            value: \"\"\r\n        })\r\n        this.props.searchItem(searchList)\r\n    }\r\n\r\n    handleClick = (event) => {\r\n        this.setState({\r\n            currentPage: Number(event.target.id)\r\n        });\r\n    }\r\n\r\n    handleSort = (type) => {\r\n        const {list} = this.props\r\n        const sortList = (list.length > 0) ? list : []\r\n        const isSorted = this.sorted[type];\r\n        let direction = isSorted ? 1 : -1\r\n\r\n        const sorted = [].slice.call(sortList).sort((a, b) => {\r\n            if (a[type] === b[type]) {\r\n                return 0;\r\n            }\r\n            return a[type] > b[type] ? direction : direction * -1;\r\n        });\r\n\r\n        this.sorted[type] = !isSorted;\r\n        this.props.updateList(sorted)\r\n        this.setState({\r\n            isClicked: isSorted ? false : true\r\n        })\r\n    }\r\n\r\n    handleRequestList = (e) => {\r\n        let buttonId = e.target.id\r\n        if (String(buttonId) === \"button-short\") {\r\n            this.props.fetchListRequest(\"https://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\")\r\n        } else if (String(buttonId) === \"button-long\") {\r\n            this.props.fetchListRequest(\"https://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}\")\r\n        }\r\n        if (this.props.searchItems) {\r\n            this.props.searchItems.length = 0\r\n        }\r\n    }\r\n\r\n    getTitles = () => {\r\n        const {list} = this.props\r\n        const listArr = (list.length > 0) ? list : []\r\n        const keysArr = []\r\n        if (listArr.length > 0) {\r\n            for (var key in listArr[0]) {\r\n                if (key === 'address') {\r\n                    for (var nestedKey in listArr[0][key]) {\r\n                        keysArr.push(nestedKey)\r\n                    }\r\n                } else {\r\n                    keysArr.push(key)\r\n                }\r\n            }\r\n        }\r\n        return keysArr\r\n    }\r\n\r\n    handleClickRow = (e) => {\r\n        const {list} = this.props\r\n        const rowId = e.currentTarget.id\r\n        let selected = list.filter((el) => {\r\n            return Number(el.id) === Number(rowId)\r\n        })\r\n        this.props.selectUser(selected)\r\n    }\r\n\r\n    renderTableList = (el, i) => {\r\n        return (\r\n            <tr className=\"table-item-row\"\r\n                id={el.id}\r\n                key={i}\r\n                onClick={this.handleClickRow}>\r\n                <td className=\"table-name-item\">{el.id}</td>\r\n                <td className=\"table-name-item\">{el.firstName}</td>\r\n                <td className=\"table-name-item\">{el.lastName}</td>\r\n                <td className=\"table-name-item\">{el.email}</td>\r\n                <td className=\"table-name-item\">{el.phone}</td>\r\n                <td className=\"table-name-item\">{el.address.streetAddress}</td>\r\n                <td className=\"table-name-item\">{el.address.city}</td>\r\n                <td className=\"table-name-item\">{el.address.state}</td>\r\n                <td className=\"table-name-item\">{el.address.zip}</td>\r\n                <td className=\"table-name-item\">{el.description}</td>\r\n            </tr>)\r\n    }\r\n\r\n    renderUserSection = (el, i) => {\r\n        return (\r\n            <div className='user-section'\r\n                 key={i}>\r\n                <div\r\n                    className='user-name'>Пользователь<b>{el.firstName} </b>\r\n                </div>\r\n                <div\r\n                    className=\"user-description\">Описание {el.description}\r\n                </div>\r\n                <div\r\n                    className=\"user-address\">\r\n                    <div\r\n                        className=\"user-address-title\">Адрес\r\n                    </div>\r\n\r\n                    <div\r\n                        className=\"user-city\">Город:{el.address.city}\r\n                    </div>\r\n                    <div\r\n                        className=\"user-district\">Штат:{el.address.state}\r\n                    </div>\r\n                    <div\r\n                        className=\"user-index\">Индекс:{el.address.zip}\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n    }\r\n\r\n    render() {\r\n        const {list, searchItems, selectedUser} = this.props\r\n        const {isFetching} = this.props.fetchList\r\n        const {value, isClicked, currentPage, itemsPerPage, disabled} = this.state;\r\n        let listArr;\r\n        if (searchItems) {\r\n            listArr = (searchItems.length > 0) ? searchItems : list\r\n        } else if (list.length > 0) {\r\n            listArr = list\r\n        } else {\r\n            listArr = []\r\n        }\r\n        const keys = this.getTitles()\r\n        const indexOfLastItem = currentPage * itemsPerPage;\r\n        const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n        const currentItems = listArr.slice(indexOfFirstItem, indexOfLastItem);\r\n        const pageNumbers = [];\r\n\r\n        for (let i = 1; i <= Math.ceil(listArr.length / itemsPerPage); i++) {\r\n            pageNumbers.push(i);\r\n        }\r\n\r\n        const renderPageNumbers = pageNumbers.map(number => {\r\n            return (\r\n                <li className='number-item'\r\n                    key={number}\r\n                    id={number}\r\n                    onClick={this.handleClick}\r\n                >\r\n                    {number}\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className='app'>\r\n                <div className='app-container'>\r\n                    <div className='button-section'>\r\n                        <button\r\n                            id='button-short'\r\n                            onClick={this.handleRequestList}>\r\n                            Загрузить Короткий список\r\n                        </button>\r\n                        <button\r\n                            id='button-long'\r\n                            onClick={this.handleRequestList}>\r\n                            Загрузить Полный список\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className='input-section'>\r\n                        <form\r\n                            onSubmit={this.handlePreventDefault}>\r\n                            <input type=\"text\"\r\n                                   className=\"input-address\"\r\n                                   placeholder=\"Ведите-адрес\"\r\n                                   onChange={this.handleChange}\r\n                                   value={value}\r\n                            />\r\n                            <input type=\"submit\"\r\n                                   value=\"найти\"\r\n                                   className=\"input-search\"\r\n                                   onClick={this.handleSubmit}\r\n                                   disabled={disabled}\r\n                            />\r\n                        </form>\r\n                    </div>\r\n\r\n                    {isFetching ? (<Spinner/>) :\r\n                        (<table className=\"table-addresses\">\r\n                            <tr className='table-title-row'>\r\n                                {keys.map((el, i) => (\r\n                                        <th key={i}\r\n                                            className={cx(\"table-title-item\", {['rotated']: isClicked})}\r\n                                            onClick={() => this.handleSort(el)}\r\n                                        >\r\n                                            {el}\r\n                                        </th>\r\n                                    )\r\n                                )}\r\n                            </tr>\r\n\r\n                            {currentItems.map((el, i) => this.renderTableList(el, i))}\r\n                        </table>)}\r\n                    <ul className='number-list'>\r\n                        {renderPageNumbers}\r\n                    </ul>\r\n                    {selectedUser && (selectedUser.map((el, i) => this.renderUserSection(el,i)))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    list: getList(state),\r\n    selectedUser: getSelectedUser(state),\r\n    searchItems: getSearchItem(state),\r\n    fetchList: getFetchList(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    fetchListRequest,\r\n    fetchListSuccess,\r\n    searchItem,\r\n    selectUser,\r\n    updateList\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { combineReducers } from \"redux\";\r\n\r\nimport fetchList from \"./fetchList\";\r\nimport selectedUser from './selectUser'\r\nimport searchItems from'./searchItem'\r\n\r\n\r\nexport default combineReducers({\r\n    fetchList,\r\n    selectedUser,\r\n    searchItems\r\n});","export const getList = (url) =>\r\n    fetch(`${url}`, {\r\n        method: 'GET',\r\n        mode: 'cors'\r\n    })\r\n        .then(response => response.json())\r\n\r\n\r\n\r\n\r\n","import {\r\n   fetchListRequest,\r\n   fetchListSuccess,fetchListFailure\r\n\r\n} from \"../actions/fetchList\";\r\n\r\nimport { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport { getList } from \"../api/api\";\r\n\r\n\r\nexport function* fetchListSaga(action) {\r\n    try {\r\n        const list = yield call(getList,action.payload);\r\n        yield put(fetchListSuccess(list));\r\n    } catch (error) {\r\n        yield put(fetchListFailure(error));\r\n    }\r\n}\r\n\r\nexport function* fetchListWatch() {\r\n    yield takeLatest(fetchListRequest, fetchListSaga);\r\n}","import {fork} from 'redux-saga/effects'\r\nimport {fetchListWatch} from \"./fetchList\";\r\n// import {searchWatch} from \"./search\";\r\n\r\nexport default function* () {\r\n    yield fork(fetchListWatch)\r\n    // yield fork(searchWatch)\r\n\r\n\r\n}","import {createStore, applyMiddleware, compose} from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootReducer from './reducers'\r\nimport rootSaga from './sagas'\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport default initialState => {\r\n    const store = createStore(\r\n        rootReducer,\r\n        initialState,\r\n        compose(\r\n            applyMiddleware(sagaMiddleware),\r\n            window.devToolsExtension ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f\r\n        )\r\n    )\r\n    sagaMiddleware.run(rootSaga)\r\n\r\n    return store\r\n}\r\n\r\n","import 'normalize.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App'\nimport {BrowserRouter} from 'react-router-dom'\nimport {Provider} from 'react-redux'\nimport createStore from './store'\n\nconst store = createStore();\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}